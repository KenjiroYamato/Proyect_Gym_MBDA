CREATE OR REPLACE PACKAGE BODY PKG_USUARIOS AS
    PROCEDURE REGISTRAR_USUARIO(
        P_DOCUMENTO IN NUMBER,
        P_TIPODOCUMENTO IN VARCHAR2,
        P_CORREO IN VARCHAR2,
        P_TELEFONO IN VARCHAR2,
        P_FECHANACIMIENTO IN DATE,
        P_NOMBRE IN VARCHAR2,
        P_APELLIDO IN VARCHAR2,
        P_GENERO IN VARCHAR2,
        P_EDAD IN NUMBER
    ) IS
    BEGIN
        INSERT INTO USUARIOS
        VALUES (P_DOCUMENTO,
                P_TIPODOCUMENTO,
                P_CORREO,
                P_TELEFONO,
                P_FECHANACIMIENTO,
                P_NOMBRE,
                P_APELLIDO,
                P_GENERO,
                P_EDAD);
    END REGISTRAR_USUARIO;

    PROCEDURE MODIFICAR_USUARIO(
        P_DOCUMENTO IN NUMBER,
        P_CORREO IN VARCHAR2,
        P_TELEFONO IN VARCHAR2
    ) IS
    BEGIN
        UPDATE USUARIOS
        SET CORREO   = P_CORREO,
            TELEFONO = P_TELEFONO
        WHERE DOCUMENTO = P_DOCUMENTO;
    END MODIFICAR_USUARIO;

    PROCEDURE ELIMINAR_USUARIO(P_DOCUMENTO IN NUMBER) IS
    BEGIN
        DELETE FROM USUARIOS WHERE DOCUMENTO = P_DOCUMENTO;
    END ELIMINAR_USUARIO;

    FUNCTION CONSULTAR_USUARIO(P_DOCUMENTO IN NUMBER) RETURN SYS_REFCURSOR IS
        USUARIO_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN USUARIO_RESULTADO FOR SELECT * FROM USUARIOS WHERE DOCUMENTO = P_DOCUMENTO;
        RETURN USUARIO_RESULTADO;
    END CONSULTAR_USUARIO;

    PROCEDURE CREAR_CONTROL(
        P_USUARIO IN NUMBER,
        P_FECHA IN DATE,
        P_PESO IN NUMBER,
        P_ALTURA IN NUMBER,
        P_MBICEP IN NUMBER,
        P_MTRICEP IN NUMBER,
        P_MTORSO IN NUMBER,
        P_MABDOMEN IN NUMBER,
        P_IMC IN NUMBER
    ) IS
    BEGIN
        INSERT INTO CONTROLES
        VALUES (P_USUARIO,
                P_FECHA,
                P_PESO,
                P_ALTURA,
                P_MBICEP,
                P_MTRICEP,
                P_MTORSO,
                P_MABDOMEN,
                P_IMC);
    END CREAR_CONTROL;

    FUNCTION MEMBRESIA_ACTIVA(P_USUARIO IN NUMBER) RETURN BOOLEAN IS
        MEMBRESIA_ACTIVA BOOLEAN;
    BEGIN
        SELECT ESTATUS INTO MEMBRESIA_ACTIVA FROM MEMBRESIAS WHERE USUARIO = P_USUARIO;

        IF MEMBRESIA_ACTIVA <> 'Activa' THEN
            RETURN FALSE;
        END IF;

        RETURN TRUE;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN FALSE;
    END MEMBRESIA_ACTIVA;

    FUNCTION ACCESO_ZONA(P_USUARIO IN NUMBER, P_SEDE IN NUMBER, P_ZONA IN VARCHAR2) RETURN BOOLEAN IS
        EXISTE_BENEFICIO VARCHAR2(1);
        TIPO_MEMBRESIA   VARCHAR2(50);
    BEGIN
        SELECT TIPO INTO TIPO_MEMBRESIA FROM MEMBRESIAS WHERE USUARIO = P_USUARIO;

        SELECT 1
        INTO EXISTE_BENEFICIO
        FROM BENEFICIOZONAS
        WHERE TIPO_MEMBRESIA = BENEFICIOZONAS.TIPO_MEMBRESIA
          AND SEDE = P_SEDE
          AND ZONA = P_ZONA;

        IF NOT PKG_USUARIOS.MEMBRESIA_ACTIVA(P_USUARIO) THEN
            RETURN FALSE;
        END IF;

        IF NOT EXISTE_BENEFICIO THEN
            RETURN False;
        END IF;

        RETURN TRUE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN FALSE;
    END ACCESO_ZONA;

END PKG_USUARIOS;

CREATE OR REPLACE PACKAGE BODY PKG_EMPLEADOS AS
    PROCEDURE REGISTRAR_EMPLEADO(
        P_DOCUMENTO IN NUMBER,
        P_TIPODOCUMENTO IN VARCHAR2,
        P_CORREO IN VARCHAR2,
        P_TELEFONO IN VARCHAR2,
        P_FECHANACIMIENTO IN DATE,
        P_NOMBRE IN VARCHAR2,
        P_APELLIDO IN VARCHAR2,
        P_GENERO IN VARCHAR2,
        P_EDAD IN NUMBER,
        P_SEDE IN NUMBER,
        P_ESTATUS IN VARCHAR2,
        P_CARGO IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO EMPLEADOS
        VALUES (P_DOCUMENTO,
                P_TIPODOCUMENTO,
                P_CORREO,
                P_TELEFONO,
                P_FECHANACIMIENTO,
                P_NOMBRE,
                P_APELLIDO,
                P_GENERO,
                P_EDAD,
                P_SEDE,
                P_ESTATUS,
                P_CARGO);
    END REGISTRAR_EMPLEADO;

    PROCEDURE MODIFICAR_EMPLEADO(
        P_DOCUMENTO IN NUMBER,
        P_CORREO IN VARCHAR2,
        P_TELEFONO IN VARCHAR2,
        P_SEDE IN NUMBER,
        P_ESTATUS IN VARCHAR2,
        P_CARGO IN VARCHAR2
    ) IS
    BEGIN
        UPDATE EMPLEADOS
        SET CORREO   = P_CORREO,
            TELEFONO = P_TELEFONO,
            SEDE     = P_SEDE,
            ESTATUS  = P_ESTATUS,
            CARGO    = P_CARGO
        WHERE DOCUMENTO = P_DOCUMENTO;
    END MODIFICAR_EMPLEADO;

    FUNCTION CONSULTAR_EMPLEADO(P_DOCUMENTO IN NUMBER) RETURN SYS_REFCURSOR IS
        EMPLEADO_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN EMPLEADO_RESULTADO FOR SELECT * FROM EMPLEADOS WHERE DOCUMENTO = P_DOCUMENTO;
        RETURN EMPLEADO_RESULTADO;
    END CONSULTAR_EMPLEADO;

    PROCEDURE ELIMINAR_EMPLEADO(P_DOCUMENTO IN NUMBER) IS
    BEGIN
        DELETE FROM EMPLEADOS WHERE DOCUMENTO = P_DOCUMENTO;
    END ELIMINAR_EMPLEADO;

    FUNCTION CONSULTAR_EMPLEADOS RETURN SYS_REFCURSOR IS
        EMPLEADOS_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN EMPLEADOS_RESULTADO FOR SELECT * FROM EMPLEADOS;
        RETURN EMPLEADOS_RESULTADO;
    END CONSULTAR_EMPLEADOS;

    FUNCTION CONSULTAR_CONTRATO(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        CONTRATO_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN CONTRATO_RESULTADO FOR SELECT * FROM CONTRATOS WHERE ID = P_ID;
        RETURN CONTRATO_RESULTADO;
    END CONSULTAR_CONTRATO;

    PROCEDURE CREAR_CONTRATO(
        P_EMPLEADO IN NUMBER,
        P_TIPOCONTRATO IN VARCHAR2,
        P_FECHAINICIO IN DATE,
        P_FECHAFINAL IN DATE,
        P_SUELDO IN NUMBER,
        P_DESCRIPCION IN VARCHAR2,
        P_ESTADO IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO CONTRATOS
        VALUES (-1,
                P_EMPLEADO,
                P_TIPOCONTRATO,
                P_FECHAINICIO,
                P_FECHAFINAL,
                P_SUELDO,
                P_DESCRIPCION,
                P_ESTADO);
    END CREAR_CONTRATO;

    FUNCTION CONSULTAR_SOLICITUD(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        SOLICITUD_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN SOLICITUD_RESULTADO FOR SELECT * FROM SOLICITUDES WHERE ID = P_ID;
        RETURN SOLICITUD_RESULTADO;
    END CONSULTAR_SOLICITUD;

    FUNCTION CONSULTAR_SOLICITUDES_EMPLEADO(P_EMPLEADO IN NUMBER) RETURN SYS_REFCURSOR IS
        SOLICITUDES_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN SOLICITUDES_RESULTADO FOR SELECT * FROM SOLICITUDES WHERE CREADOR = P_EMPLEADO;
        RETURN SOLICITUDES_RESULTADO;
    END CONSULTAR_SOLICITUDES_EMPLEADO;

    PROCEDURE CREAR_SOLICITUD(
        P_CREADOR IN NUMBER,
        P_IMPORTANCIA IN NUMBER,
        P_ASUNTO IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO SOLICITUDES
        VALUES (-1,
                P_CREADOR,
                SYSTIMESTAMP,
                P_IMPORTANCIA,
                P_ASUNTO,
                P_DESCRIPCION);
    END CREAR_SOLICITUD;

    FUNCTION CONSULTAR_EVENTO(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        EVENTO_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN EVENTO_RESULTADO FOR SELECT * FROM EVENTOS WHERE ID = P_ID;
        RETURN EVENTO_RESULTADO;
    END CONSULTAR_EVENTO;

    FUNCTION CONSULTAR_EVENTOS RETURN SYS_REFCURSOR IS
        EVENTOS_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN EVENTOS_RESULTADO FOR SELECT * FROM EVENTOS;
        RETURN EVENTOS_RESULTADO;
    END CONSULTAR_EVENTOS;

    FUNCTION CONSULTAR_EVENTOS_EMPLEADO(P_EMPLEADO IN NUMBER) RETURN SYS_REFCURSOR IS
        EVENTOS_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN EVENTOS_RESULTADO FOR SELECT * FROM EVENTOS WHERE LIDER = P_EMPLEADO;
        RETURN EVENTOS_RESULTADO;
    END CONSULTAR_EVENTOS_EMPLEADO;
END PKG_EMPLEADOS;

CREATE OR REPLACE PACKAGE BODY PKG_SEDES AS
    PROCEDURE CREAR_UBICACION(
        P_ID           IN NUMBER,
        P_PAIS         IN VARCHAR2,
        P_REGION       IN VARCHAR2,
        P_CIUDAD       IN VARCHAR2,
        P_DIRECCION    IN VARCHAR2,
        P_DETALLES     IN VARCHAR2,
        P_CODIGOPOSTAL IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO LUGARES VALUES (
                                       P_ID,
                                       P_PAIS,
                                       P_REGION,
                                       P_CIUDAD,
                                       P_DIRECCION,
                                       P_DETALLES,
                                       P_CODIGOPOSTAL
                                   );
    END CREAR_UBICACION;

    PROCEDURE CREAR_SEDE(
        P_ID        IN NUMBER,
        P_NOMBRE    IN VARCHAR2,
        P_UBICACION IN NUMBER
    ) IS
    BEGIN
        INSERT INTO SEDES VALUES (
                                     P_ID,
                                     P_NOMBRE,
                                     P_UBICACION
                                 );
    END CREAR_SEDE;

    PROCEDURE MODIFICAR_SEDE(
        P_ID        IN NUMBER,
        P_NOMBRE    IN VARCHAR2
    ) IS
    BEGIN
        UPDATE SEDES SET
            NOMBRE = P_NOMBRE
        WHERE ID = P_ID;
    END MODIFICAR_SEDE;

    PROCEDURE ELIMINAR_SEDE(P_ID IN NUMBER) IS
    BEGIN
        DELETE FROM SEDES WHERE ID = P_ID;
    END ELIMINAR_SEDE;

    FUNCTION CONSULTAR_SEDE(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        SEDE_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN SEDE_RESULTADO FOR SELECT * FROM SEDES WHERE ID = P_ID;
        RETURN SEDE_RESULTADO;
    END CONSULTAR_SEDE;

    FUNCTION CONSULTAR_SEDES RETURN SYS_REFCURSOR IS
        SEDES_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN SEDES_RESULTADO FOR SELECT * FROM SEDES;
        RETURN SEDES_RESULTADO;
    END CONSULTAR_SEDES;

    PROCEDURE CREAR_ZONA(
        P_NOMBRE      IN VARCHAR2,
        P_SEDE        IN NUMBER,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO ZONAS VALUES (
                                     P_NOMBRE,
                                     P_SEDE,
                                     P_DESCRIPCION
                                 );
    END CREAR_ZONA;

    PROCEDURE MODIFICAR_ZONA(
        P_NOMBRE      IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        UPDATE ZONAS SET
            DESCRIPCION = P_DESCRIPCION
        WHERE NOMBRE = P_NOMBRE;
    END MODIFICAR_ZONA;

    FUNCTION CONSULTAR_ZONAS(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        ZONAS_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN ZONAS_RESULTADO FOR SELECT * FROM ZONAS WHERE SEDE = P_SEDE;
        RETURN ZONAS_RESULTADO;
    END CONSULTAR_ZONAS;

    PROCEDURE ELIMINAR_ZONA(P_NOMBRE IN VARCHAR2, P_SEDE IN NUMBER) IS
    BEGIN
        DELETE FROM ZONAS WHERE NOMBRE = P_NOMBRE AND SEDE = P_SEDE;
    END ELIMINAR_ZONA;

    FUNCTION CREAR_REGISTRO_ELEMENTO(
        P_ID          IN NUMBER,
        P_SEDE        IN NUMBER,
        P_NOMBRE      IN VARCHAR2,
        P_PRECIO      IN NUMBER,
        P_FECHACOMPRA IN DATE,
        P_TIPO        IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2
    ) RETURN SYS_REFCURSOR IS
        REGISTRO_RESULTADO SYS_REFCURSOR;
    BEGIN
        INSERT INTO INVENTARIO VALUES (
                                          P_ID,
                                          P_SEDE,
                                          P_NOMBRE,
                                          P_PRECIO,
                                          P_FECHACOMPRA,
                                          P_TIPO,
                                          P_DESCRIPCION
                                      );
        OPEN REGISTRO_RESULTADO FOR SELECT * FROM INVENTARIO WHERE ID = P_ID;
        RETURN REGISTRO_RESULTADO;
    END CREAR_REGISTRO_ELEMENTO;

    PROCEDURE CREAR_REGISTRO_MAQUINA(
        P_ID          IN NUMBER,
        P_SEDE        IN NUMBER,
        P_NOMBRE      IN VARCHAR2,
        P_PRECIO      IN NUMBER,
        P_FECHACOMPRA IN DATE,
        P_TIPO        IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_ESTADO      IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO INVENTARIO VALUES (
                                          P_ID,
                                          P_SEDE,
                                          P_NOMBRE,
                                          P_PRECIO,
                                          P_FECHACOMPRA,
                                          P_TIPO,
                                          P_DESCRIPCION
                                      );
        INSERT INTO MAQUINAS VALUES (
                                        P_ID,
                                        P_ESTADO
                                    );
    END CREAR_REGISTRO_MAQUINA;

    PROCEDURE MODIFICAR_REGISTRO_ELEMENTO(
        P_ID          IN NUMBER,
        P_NOMBRE      IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        UPDATE INVENTARIO SET
                              NOMBRE = P_NOMBRE,
                              DESCRIPCION = P_DESCRIPCION
        WHERE ID = P_ID;
    END MODIFICAR_REGISTRO_ELEMENTO;

    PROCEDURE MODIFICAR_REGISTRO_MAQUINA(
        P_ID          IN NUMBER,
        P_NOMBRE      IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_ESTADO      IN VARCHAR2
    ) IS
    BEGIN
        UPDATE INVENTARIO SET
                              NOMBRE = P_NOMBRE,
                              DESCRIPCION = P_DESCRIPCION
        WHERE ID = P_ID;
        UPDATE MAQUINAS SET
            ESTADO = P_ESTADO
        WHERE ID = P_ID;
    END MODIFICAR_REGISTRO_MAQUINA;
END PKG_SEDES;

CREATE OR REPLACE PACKAGE BODY PKG_EVENTOS AS
    PROCEDURE CREAR_EVENTO(
        P_LIDER       IN NUMBER,
        P_SEDE        IN NUMBER,
        P_NOMBRE      IN VARCHAR2,
        P_FECHAYHORA  IN DATE,
        P_DURACION    IN NUMBER,
        P_ESTADO      IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO EVENTOS VALUES (
                                       -1,
                                       P_LIDER,
                                       P_SEDE,
                                       P_NOMBRE,
                                       P_FECHAYHORA,
                                       P_DURACION,
                                       P_ESTADO,
                                       P_DESCRIPCION
                                   );
    END CREAR_EVENTO;

    PROCEDURE MODIFICAR_EVENTO(
        P_ID          IN NUMBER,
        P_LIDER       IN NUMBER,
        P_SEDE        IN NUMBER,
        P_NOMBRE      IN VARCHAR2,
        P_FECHAYHORA  IN DATE,
        P_DURACION    IN NUMBER,
        P_ESTADO      IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        UPDATE EVENTOS SET
                           LIDER = P_LIDER,
                           SEDE = P_SEDE,
                           NOMBRE = P_NOMBRE,
                           FECHAYHORA = P_FECHAYHORA,
                           DURACION = P_DURACION,
                           ESTADO = P_ESTADO,
                           DESCRIPCION = P_DESCRIPCION
        WHERE ID = P_ID;
    END MODIFICAR_EVENTO;

    PROCEDURE INSCRIBIR_EVENTO(P_USUARIO IN NUMBER, P_EVENTO IN NUMBER) IS
    BEGIN
        INSERT INTO ASISTENTES VALUES (
                                          P_USUARIO,
                                          P_EVENTO
                                      );
    END INSCRIBIR_EVENTO;
END PKG_EVENTOS;

CREATE OR REPLACE PACKAGE BODY PKG_MEMBRESIA AS
    PROCEDURE CREAR_TIPO_MEMBRESIA(
        P_TIPO         IN VARCHAR2,
        P_PRECIO       IN NUMBER,
        P_DURACIONDIAS IN NUMBER,
        P_DESCRIPCION  IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO TIPOMEMBRESIA VALUES (
                                             P_TIPO,
                                             P_PRECIO,
                                             P_DURACIONDIAS,
                                             P_DESCRIPCION
                                         );
    END CREAR_TIPO_MEMBRESIA;

    FUNCTION CONSULTAR_TIPOS_MEMBRESIA RETURN SYS_REFCURSOR IS
        TIPOS_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN TIPOS_RESULTADO FOR SELECT * FROM TIPOMEMBRESIA;
        RETURN TIPOS_RESULTADO;
    END CONSULTAR_TIPOS_MEMBRESIA;

    PROCEDURE ASIGNAR_BENEFICIO_ZONA(
        P_TIPO_MEMBRESIA IN VARCHAR2,
        P_ZONA           IN VARCHAR2,
        P_SEDE           IN NUMBER,
        P_DESCRIPCION    IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO TIPOMEMBRESIA VALUES (
                                             P_TIPO_MEMBRESIA,
                                             P_ZONA,
                                             P_SEDE,
                                             P_DESCRIPCION
                                         );
    END ASIGNAR_BENEFICIO_ZONA;

    FUNCTION CONSULTAR_BENEFICIO_ZONA(P_TIPO_MEMBRESIA IN VARCHAR2) RETURN SYS_REFCURSOR IS
        BENEFICIOS_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN BENEFICIOS_RESULTADO FOR SELECT * FROM TIPOMEMBRESIA WHERE TIPO = P_TIPO_MEMBRESIA;
        RETURN BENEFICIOS_RESULTADO;
    END CONSULTAR_BENEFICIO_ZONA;

    FUNCTION CONSULTAR_FACTURA(P_MEMBRESIA_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        FACTURA_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN FACTURA_RESULTADO FOR SELECT * FROM FACTURAS WHERE ID = (SELECT FACTURA FROM MEMBRESIAS WHERE ID = P_MEMBRESIA_ID);
        RETURN FACTURA_RESULTADO;
    END CONSULTAR_FACTURA;
END PKG_MEMBRESIA;

CREATE OR REPLACE PACKAGE BODY PKG_ENTRADASALIDAS AS
    PROCEDURE REGISTRAR_ENTRADA(
        P_PERSONA IN NUMBER,
        P_ZONA    IN VARCHAR2,
        P_SEDE    IN NUMBER
    ) IS
    BEGIN
        INSERT INTO REGISTROENTRADASALIDAS VALUES (
                                                      -1,
                                                      P_PERSONA,
                                                      P_ZONA,
                                                      P_SEDE,
                                                      SYSDATE,
                                                      SYSTIMESTAMP,
                                                      SYSTIMESTAMP
                                                  );
    END REGISTRAR_ENTRADA;

    PROCEDURE REGISTRAR_SALIDA(
        P_PERSONA IN NUMBER,
        P_ZONA    IN VARCHAR2,
        P_SEDE    IN NUMBER
    ) IS
    BEGIN
        UPDATE REGISTROENTRADASALIDAS SET
            HORASALIDA = SYSTIMESTAMP
        WHERE PERSONA = P_PERSONA AND ZONA = P_ZONA AND SEDE = P_SEDE;
    END REGISTRAR_SALIDA;

    FUNCTION CONSULTAR_ENTRADAS(P_PERSONA IN NUMBER) RETURN SYS_REFCURSOR IS
        ENTRADAS_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN ENTRADAS_RESULTADO FOR SELECT * FROM REGISTROENTRADASALIDAS WHERE PERSONA = P_PERSONA;
        RETURN ENTRADAS_RESULTADO;
    END CONSULTAR_ENTRADAS;

    FUNCTION CONSULTAR_SALIDAS(P_PERSONA IN NUMBER) RETURN SYS_REFCURSOR IS
        SALIDAS_RESULTADO SYS_REFCURSOR;
    BEGIN
        OPEN SALIDAS_RESULTADO FOR SELECT * FROM REGISTROENTRADASALIDAS WHERE PERSONA = P_PERSONA AND HORASALIDA IS NOT NULL;
        RETURN SALIDAS_RESULTADO;
    END CONSULTAR_SALIDAS;
END PKG_ENTRADASALIDAS;