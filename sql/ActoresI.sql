CREATE OR REPLACE PACKAGE BODY ADMINISTRACION.PKG_ADMINISTRACION AS
    -- CRUD ZONAS
    PROCEDURE REGISTRAR_ZONA(
        P_NOMBRE      IN VARCHAR2,
        P_SEDE        IN NUMBER,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Administracion.ZONAS (NOMBRE, SEDE, DESCRIPCION)
        VALUES (P_NOMBRE, P_SEDE, P_DESCRIPCION);
    END;

    FUNCTION OBTENER_ZONAS RETURN SYS_REFCURSOR IS
        ZONAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ZONAS_CURSOR FOR
            SELECT * FROM Administracion.ZONAS;
        RETURN ZONAS_CURSOR;
    END;

    FUNCTION OBTENER_ZONA(P_NOMBRE IN VARCHAR2) RETURN SYS_REFCURSOR IS
        ZONA_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ZONA_CURSOR FOR
            SELECT * FROM Administracion.ZONAS WHERE NOMBRE = P_NOMBRE;
        RETURN ZONA_CURSOR;
    END;

    FUNCTION OBTENER_ZONAS_SEDE(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        ZONAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ZONAS_CURSOR FOR
            SELECT * FROM Administracion.ZONAS WHERE SEDE = P_SEDE;
        RETURN ZONAS_CURSOR;
    END;

    PROCEDURE ACTUALIZAR_ZONA(
        P_NOMBRE      IN VARCHAR2,
        P_SEDE        IN NUMBER,
        P_DESCRIPCION IN VARCHAR2
    ) IS

    BEGIN
        UPDATE Administracion.ZONAS
        SET DESCRIPCION = P_DESCRIPCION
        WHERE NOMBRE = P_NOMBRE AND SEDE = P_SEDE;
    END;

    PROCEDURE ELIMINAR_ZONA(P_NOMBRE IN VARCHAR2, P_SEDE IN NUMBER) IS
    BEGIN
        DELETE FROM Administracion.ZONAS WHERE NOMBRE = P_NOMBRE AND SEDE = P_SEDE;
    END;

    -- CRUD SOLICITUDES
    PROCEDURE REGISTRAR_SOLICITUD(
        P_CREADOR     IN NUMBER,
        P_IMPORTANCIA IN NUMBER,
        P_ASUNTO      IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Administracion.SOLICITUDES (ID, CREADOR, FECHACREACION, IMPORTANCIA, ASUNTO, DESCRIPCION)
        VALUES (NULL, P_CREADOR, SYSTIMESTAMP, P_IMPORTANCIA, P_ASUNTO, P_DESCRIPCION);
    END;

    FUNCTION OBTENER_SOLICITUDES RETURN SYS_REFCURSOR IS
        SOLICITUDES_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN SOLICITUDES_CURSOR FOR
            SELECT * FROM Administracion.SOLICITUDES;
        RETURN SOLICITUDES_CURSOR;
    END;

    FUNCTION OBTENER_SOLICITUD(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        SOLICITUD_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN SOLICITUD_CURSOR FOR
            SELECT * FROM Administracion.SOLICITUDES WHERE ID = P_ID;
        RETURN SOLICITUD_CURSOR;
    END;

    FUNCTION OBTENER_SOLICITUDES_CREADOR(P_CREADOR IN NUMBER) RETURN SYS_REFCURSOR IS
        SOLICITUDES_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN SOLICITUDES_CURSOR FOR
            SELECT * FROM Administracion.SOLICITUDES WHERE CREADOR = P_CREADOR;
        RETURN SOLICITUDES_CURSOR;
    END;

    PROCEDURE ACTUALIZAR_SOLICITUD(
        P_ID          IN NUMBER,
        P_IMPORTANCIA IN NUMBER,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        UPDATE Administracion.SOLICITUDES
        SET IMPORTANCIA = P_IMPORTANCIA, DESCRIPCION = P_DESCRIPCION
        WHERE ID = P_ID;
    END;

    -- CRUD INVENTARIO
    PROCEDURE REGISTRAR_INVENTARIO(
        P_SEDE        IN NUMBER,
        P_NOMBRE      IN VARCHAR2,
        P_PRECIO      IN NUMBER,
        P_FECHACOMPRA IN DATE,
        P_TIPO        IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Administracion.INVENTARIO (ID, SEDE, NOMBRE, PRECIO, FECHACOMPRA, TIPO, DESCRIPCION)
        VALUES (NULL, P_SEDE, P_NOMBRE, P_PRECIO, P_FECHACOMPRA, P_TIPO, P_DESCRIPCION);
    END;

    FUNCTION OBTENER_INVENTARIO_SEDE(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        INVENTARIO_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN INVENTARIO_CURSOR FOR
            SELECT * FROM Administracion.INVENTARIO WHERE SEDE = P_SEDE;
        RETURN INVENTARIO_CURSOR;
    END;

    PROCEDURE ACTUALIZAR_INVENTARIO(
        P_ID          IN NUMBER,
        P_NOMBRE      IN VARCHAR2,
        P_TIPO        IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        UPDATE Administracion.INVENTARIO
        SET NOMBRE = P_NOMBRE, TIPO = P_TIPO, DESCRIPCION = P_DESCRIPCION
        WHERE ID = P_ID;
    END;

    PROCEDURE ELIMINAR_INVENTARIO(P_ID IN NUMBER) IS
    BEGIN
        DELETE FROM Administracion.INVENTARIO WHERE ID = P_ID;
    END;

    -- CRUD MAQUINAS
    PROCEDURE REGISTRAR_MAQUINA(
        P_ID     IN NUMBER,
        P_ESTADO IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Administracion.MAQUINAS (ID, ESTADO)
        VALUES (P_ID, P_ESTADO);
    END;

    FUNCTION OBTENER_MAQUINAS_SEDE(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        MAQUINAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN MAQUINAS_CURSOR FOR
            SELECT * FROM Administracion.MAQUINAS M, Administracion.INVENTARIO I
            WHERE M.ID = I.ID AND I.SEDE = P_SEDE;
        RETURN MAQUINAS_CURSOR;
    END;

    FUNCTION OBTENER_MAQUINA(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        MAQUINA_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN MAQUINA_CURSOR FOR
            SELECT * FROM Administracion.MAQUINAS WHERE ID = P_ID;
        RETURN MAQUINA_CURSOR;
    END;

    PROCEDURE ACTUALIZAR_MAQUINA(
        P_ID          IN NUMBER,
        P_ESTADO      IN VARCHAR2
    ) IS
    BEGIN
        UPDATE Administracion.MAQUINAS
        SET ESTADO = P_ESTADO
        WHERE ID = P_ID;
    END;

    PROCEDURE ELIMINAR_MAQUINA(P_ID IN NUMBER) IS
    BEGIN
        DELETE FROM Administracion.MAQUINAS WHERE ID = P_ID;
    END;

    -- CRUD ELEMENTOS
    PROCEDURE REGISTRAR_ELEMENTO(
        P_ID IN NUMBER
    ) IS
    BEGIN
        INSERT INTO Administracion.ELEMENTOS (ID)
        VALUES (P_ID);
    END;

    FUNCTION OBTENER_ELEMENTOS_SEDE(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        ELEMENTOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ELEMENTOS_CURSOR FOR
            SELECT * FROM Administracion.ELEMENTOS E, Administracion.INVENTARIO I
            WHERE E.ID = I.ID AND I.SEDE = P_SEDE;
        RETURN ELEMENTOS_CURSOR;
    END;

    FUNCTION OBTENER_ELEMENTO(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        ELEMENTO_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ELEMENTO_CURSOR FOR
            SELECT * FROM Administracion.ELEMENTOS WHERE ID = P_ID;
        RETURN ELEMENTO_CURSOR;
    END;

    PROCEDURE ELIMINAR_ELEMENTO(P_ID IN NUMBER) IS
    BEGIN
        DELETE FROM Administracion.ELEMENTOS WHERE ID = P_ID;
    END;

    -- CR [CREATE, READ] REGISTRO ENTRADA SALIDA
    PROCEDURE REGISTRAR_ENTRADA_SALIDA(
        P_PERSONA     IN NUMBER,
        P_ZONA        IN VARCHAR2,
        P_SEDE        IN NUMBER,
        P_FECHA       IN DATE,
        P_HORAENTRADA IN TIMESTAMP,
        P_HORASALIDA  IN TIMESTAMP
    ) IS
    BEGIN
        INSERT INTO Administracion.REGISTROENTRADASALIDAS (ID, PERSONA, ZONA, SEDE, FECHA, HORAENTRADA, HORASALIDA)
        VALUES (NULL, P_PERSONA, P_ZONA, P_SEDE, P_FECHA, P_HORAENTRADA, P_HORASALIDA);
    END;

    FUNCTION OBTENER_ENTRADAS_SALIDAS RETURN SYS_REFCURSOR IS
        ENTRADAS_SALIDAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ENTRADAS_SALIDAS_CURSOR FOR
            SELECT * FROM Administracion.REGISTROENTRADASALIDAS;
        RETURN ENTRADAS_SALIDAS_CURSOR;
    END;

    FUNCTION OBTENER_ENTRADAS_SALIDAS_PERSONA(P_PERSONA IN NUMBER) RETURN SYS_REFCURSOR IS
        ENTRADAS_SALIDAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ENTRADAS_SALIDAS_CURSOR FOR
            SELECT * FROM Administracion.REGISTROENTRADASALIDAS WHERE PERSONA = P_PERSONA;
        RETURN ENTRADAS_SALIDAS_CURSOR;
    END;

    FUNCTION OBTENER_ENTRADAS_SALIDAS_ZONA(P_ZONA IN VARCHAR2) RETURN SYS_REFCURSOR IS
        ENTRADAS_SALIDAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ENTRADAS_SALIDAS_CURSOR FOR
            SELECT * FROM Administracion.REGISTROENTRADASALIDAS WHERE ZONA = P_ZONA;
        RETURN ENTRADAS_SALIDAS_CURSOR;
    END;

    -- CR [CREATE, READ] EVENTOS
    PROCEDURE REGISTRAR_EVENTO(
        P_LIDER       IN NUMBER,
        P_SEDE        IN NUMBER,
        P_NOMBRE      IN VARCHAR2,
        P_FECHAYHORA  IN DATE,
        P_DURACION    IN NUMBER,
        P_ESTADO      IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Administracion.EVENTOS (ID, LIDER, SEDE, NOMBRE, FECHAYHORA, DURACION, ESTADO, DESCRIPCION)
        VALUES (NULL, P_LIDER, P_SEDE, P_NOMBRE, P_FECHAYHORA, P_DURACION, P_ESTADO, P_DESCRIPCION);
    END;

    FUNCTION OBTENER_EVENTOS RETURN SYS_REFCURSOR IS
        EVENTOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EVENTOS_CURSOR FOR
            SELECT * FROM Administracion.EVENTOS;
        RETURN EVENTOS_CURSOR;
    END;

    FUNCTION OBTENER_EVENTO(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        EVENTO_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EVENTO_CURSOR FOR
            SELECT * FROM Administracion.EVENTOS WHERE ID = P_ID;
        RETURN EVENTO_CURSOR;
    END;

    FUNCTION OBTENER_EVENTOS_SEDE(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        EVENTOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EVENTOS_CURSOR FOR
            SELECT * FROM Administracion.EVENTOS WHERE SEDE = P_SEDE;
        RETURN EVENTOS_CURSOR;
    END;

    -- CR [CREATE, READ] ASISTENTES
    PROCEDURE REGISTRAR_ASISTENTE(
        P_USUARIO IN NUMBER,
        P_EVENTO  IN NUMBER
    ) IS
    BEGIN
        INSERT INTO Administracion.ASISTENTES (USUARIO, EVENTO)
        VALUES (P_USUARIO, P_EVENTO);
    END;

    FUNCTION OBTENER_ASISTENTES_EVENTO(P_EVENTO IN NUMBER) RETURN SYS_REFCURSOR IS
        ASISTENTES_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ASISTENTES_CURSOR FOR
            SELECT * FROM Administracion.ASISTENTES WHERE EVENTO = P_EVENTO;
        RETURN ASISTENTES_CURSOR;
    END;

    -- R [READ] CONTRATOS
    FUNCTION OBTENER_CONTRATOS RETURN SYS_REFCURSOR IS
        CONTRATOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN CONTRATOS_CURSOR FOR
            SELECT * FROM Gerencia.CONTRATOS;
        RETURN CONTRATOS_CURSOR;
    END;

    FUNCTION OBTENER_CONTRATO(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        CONTRATO_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN CONTRATO_CURSOR FOR
            SELECT * FROM Gerencia.CONTRATOS WHERE ID = P_ID;
        RETURN CONTRATO_CURSOR;
    END;

    -- R [READ] EMPLEADOS
    FUNCTION OBTENER_EMPLEADOS_SEDE(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        EMPLEADOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EMPLEADOS_CURSOR FOR
            SELECT * FROM Gerencia.EMPLEADOS WHERE SEDE = P_SEDE;
        RETURN EMPLEADOS_CURSOR;
    END;
END;