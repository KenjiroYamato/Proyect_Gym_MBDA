CREATE OR REPLACE PACKAGE BODY ADMINISTRACION.PKG_ADMINISTRACION AS
    -- CRUD ZONAS
    PROCEDURE REGISTRAR_ZONA(
        P_NOMBRE      IN VARCHAR2,
        P_SEDE        IN NUMBER,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Administracion.ZONAS (NOMBRE, SEDE, DESCRIPCION)
        VALUES (P_NOMBRE, P_SEDE, P_DESCRIPCION);
    END;

    FUNCTION OBTENER_ZONAS RETURN SYS_REFCURSOR IS
        ZONAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ZONAS_CURSOR FOR
            SELECT * FROM Administracion.ZONAS;
        RETURN ZONAS_CURSOR;
    END;

    FUNCTION OBTENER_ZONA(P_NOMBRE IN VARCHAR2) RETURN SYS_REFCURSOR IS
        ZONA_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ZONA_CURSOR FOR
            SELECT * FROM Administracion.ZONAS WHERE NOMBRE = P_NOMBRE;
        RETURN ZONA_CURSOR;
    END;

    FUNCTION OBTENER_ZONAS_SEDE(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        ZONAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ZONAS_CURSOR FOR
            SELECT * FROM Administracion.ZONAS WHERE SEDE = P_SEDE;
        RETURN ZONAS_CURSOR;
    END;

    PROCEDURE ACTUALIZAR_ZONA(
        P_NOMBRE      IN VARCHAR2,
        P_SEDE        IN NUMBER,
        P_DESCRIPCION IN VARCHAR2
    ) IS

    BEGIN
        UPDATE Administracion.ZONAS
        SET DESCRIPCION = P_DESCRIPCION
        WHERE NOMBRE = P_NOMBRE AND SEDE = P_SEDE;
    END;

    PROCEDURE ELIMINAR_ZONA(P_NOMBRE IN VARCHAR2, P_SEDE IN NUMBER) IS
    BEGIN
        DELETE FROM Administracion.ZONAS WHERE NOMBRE = P_NOMBRE AND SEDE = P_SEDE;
    END;

    -- CRUD SOLICITUDES
    PROCEDURE REGISTRAR_SOLICITUD(
        P_CREADOR     IN NUMBER,
        P_IMPORTANCIA IN NUMBER,
        P_ASUNTO      IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Administracion.SOLICITUDES (ID, CREADOR, FECHACREACION, IMPORTANCIA, ASUNTO, DESCRIPCION)
        VALUES (NULL, P_CREADOR, SYSTIMESTAMP, P_IMPORTANCIA, P_ASUNTO, P_DESCRIPCION);
    END;

    FUNCTION OBTENER_SOLICITUDES RETURN SYS_REFCURSOR IS
        SOLICITUDES_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN SOLICITUDES_CURSOR FOR
            SELECT * FROM Administracion.SOLICITUDES;
        RETURN SOLICITUDES_CURSOR;
    END;

    FUNCTION OBTENER_SOLICITUD(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        SOLICITUD_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN SOLICITUD_CURSOR FOR
            SELECT * FROM Administracion.SOLICITUDES WHERE ID = P_ID;
        RETURN SOLICITUD_CURSOR;
    END;

    FUNCTION OBTENER_SOLICITUDES_CREADOR(P_CREADOR IN NUMBER) RETURN SYS_REFCURSOR IS
        SOLICITUDES_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN SOLICITUDES_CURSOR FOR
            SELECT * FROM Administracion.SOLICITUDES WHERE CREADOR = P_CREADOR;
        RETURN SOLICITUDES_CURSOR;
    END;

    PROCEDURE ACTUALIZAR_SOLICITUD(
        P_ID          IN NUMBER,
        P_IMPORTANCIA IN NUMBER,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        UPDATE Administracion.SOLICITUDES
        SET IMPORTANCIA = P_IMPORTANCIA, DESCRIPCION = P_DESCRIPCION
        WHERE ID = P_ID;
    END;

    -- CRUD INVENTARIO
    PROCEDURE REGISTRAR_INVENTARIO(
        P_SEDE        IN NUMBER,
        P_NOMBRE      IN VARCHAR2,
        P_PRECIO      IN NUMBER,
        P_FECHACOMPRA IN DATE,
        P_TIPO        IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Administracion.INVENTARIO (ID, SEDE, NOMBRE, PRECIO, FECHACOMPRA, TIPO, DESCRIPCION)
        VALUES (NULL, P_SEDE, P_NOMBRE, P_PRECIO, P_FECHACOMPRA, P_TIPO, P_DESCRIPCION);
    END;

    FUNCTION OBTENER_INVENTARIO_SEDE(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        INVENTARIO_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN INVENTARIO_CURSOR FOR
            SELECT * FROM Administracion.INVENTARIO WHERE SEDE = P_SEDE;
        RETURN INVENTARIO_CURSOR;
    END;

    PROCEDURE ACTUALIZAR_INVENTARIO(
        P_ID          IN NUMBER,
        P_NOMBRE      IN VARCHAR2,
        P_TIPO        IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        UPDATE Administracion.INVENTARIO
        SET NOMBRE = P_NOMBRE, TIPO = P_TIPO, DESCRIPCION = P_DESCRIPCION
        WHERE ID = P_ID;
    END;

    PROCEDURE ELIMINAR_INVENTARIO(P_ID IN NUMBER) IS
    BEGIN
        DELETE FROM Administracion.INVENTARIO WHERE ID = P_ID;
    END;

    -- CRUD MAQUINAS
    PROCEDURE REGISTRAR_MAQUINA(
        P_ID     IN NUMBER,
        P_ESTADO IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Administracion.MAQUINAS (ID, ESTADO)
        VALUES (P_ID, P_ESTADO);
    END;

    FUNCTION OBTENER_MAQUINAS_SEDE(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        MAQUINAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN MAQUINAS_CURSOR FOR
            SELECT * FROM Administracion.MAQUINAS M, Administracion.INVENTARIO I
            WHERE M.ID = I.ID AND I.SEDE = P_SEDE;
        RETURN MAQUINAS_CURSOR;
    END;

    FUNCTION OBTENER_MAQUINA(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        MAQUINA_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN MAQUINA_CURSOR FOR
            SELECT * FROM Administracion.MAQUINAS WHERE ID = P_ID;
        RETURN MAQUINA_CURSOR;
    END;

    PROCEDURE ACTUALIZAR_MAQUINA(
        P_ID          IN NUMBER,
        P_ESTADO      IN VARCHAR2
    ) IS
    BEGIN
        UPDATE Administracion.MAQUINAS
        SET ESTADO = P_ESTADO
        WHERE ID = P_ID;
    END;

    PROCEDURE ELIMINAR_MAQUINA(P_ID IN NUMBER) IS
    BEGIN
        DELETE FROM Administracion.MAQUINAS WHERE ID = P_ID;
    END;

    -- CRUD ELEMENTOS
    PROCEDURE REGISTRAR_ELEMENTO(
        P_ID IN NUMBER
    ) IS
    BEGIN
        INSERT INTO Administracion.ELEMENTOS (ID)
        VALUES (P_ID);
    END;

    FUNCTION OBTENER_ELEMENTOS_SEDE(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        ELEMENTOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ELEMENTOS_CURSOR FOR
            SELECT * FROM Administracion.ELEMENTOS E, Administracion.INVENTARIO I
            WHERE E.ID = I.ID AND I.SEDE = P_SEDE;
        RETURN ELEMENTOS_CURSOR;
    END;

    FUNCTION OBTENER_ELEMENTO(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        ELEMENTO_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ELEMENTO_CURSOR FOR
            SELECT * FROM Administracion.ELEMENTOS WHERE ID = P_ID;
        RETURN ELEMENTO_CURSOR;
    END;

    PROCEDURE ELIMINAR_ELEMENTO(P_ID IN NUMBER) IS
    BEGIN
        DELETE FROM Administracion.ELEMENTOS WHERE ID = P_ID;
    END;

    -- CR [CREATE, READ] REGISTRO ENTRADA SALIDA
    PROCEDURE REGISTRAR_ENTRADA_SALIDA(
        P_PERSONA     IN NUMBER,
        P_ZONA        IN VARCHAR2,
        P_SEDE        IN NUMBER,
        P_FECHA       IN DATE,
        P_HORAENTRADA IN TIMESTAMP,
        P_HORASALIDA  IN TIMESTAMP
    ) IS
    BEGIN
        INSERT INTO Administracion.REGISTROENTRADASALIDAS (ID, PERSONA, ZONA, SEDE, FECHA, HORAENTRADA, HORASALIDA)
        VALUES (NULL, P_PERSONA, P_ZONA, P_SEDE, P_FECHA, P_HORAENTRADA, P_HORASALIDA);
    END;

    FUNCTION OBTENER_ENTRADAS_SALIDAS RETURN SYS_REFCURSOR IS
        ENTRADAS_SALIDAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ENTRADAS_SALIDAS_CURSOR FOR
            SELECT * FROM Administracion.REGISTROENTRADASALIDAS;
        RETURN ENTRADAS_SALIDAS_CURSOR;
    END;

    FUNCTION OBTENER_ENTRADAS_SALIDAS_PERSONA(P_PERSONA IN NUMBER) RETURN SYS_REFCURSOR IS
        ENTRADAS_SALIDAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ENTRADAS_SALIDAS_CURSOR FOR
            SELECT * FROM Administracion.REGISTROENTRADASALIDAS WHERE PERSONA = P_PERSONA;
        RETURN ENTRADAS_SALIDAS_CURSOR;
    END;

    FUNCTION OBTENER_ENTRADAS_SALIDAS_ZONA(P_ZONA IN VARCHAR2) RETURN SYS_REFCURSOR IS
        ENTRADAS_SALIDAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ENTRADAS_SALIDAS_CURSOR FOR
            SELECT * FROM Administracion.REGISTROENTRADASALIDAS WHERE ZONA = P_ZONA;
        RETURN ENTRADAS_SALIDAS_CURSOR;
    END;

    -- CR [CREATE, READ] EVENTOS
    PROCEDURE REGISTRAR_EVENTO(
        P_LIDER       IN NUMBER,
        P_SEDE        IN NUMBER,
        P_NOMBRE      IN VARCHAR2,
        P_FECHAYHORA  IN DATE,
        P_DURACION    IN NUMBER,
        P_ESTADO      IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Administracion.EVENTOS (ID, LIDER, SEDE, NOMBRE, FECHAYHORA, DURACION, ESTADO, DESCRIPCION)
        VALUES (NULL, P_LIDER, P_SEDE, P_NOMBRE, P_FECHAYHORA, P_DURACION, P_ESTADO, P_DESCRIPCION);
    END;

    FUNCTION OBTENER_EVENTOS RETURN SYS_REFCURSOR IS
        EVENTOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EVENTOS_CURSOR FOR
            SELECT * FROM Administracion.EVENTOS;
        RETURN EVENTOS_CURSOR;
    END;

    FUNCTION OBTENER_EVENTO(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        EVENTO_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EVENTO_CURSOR FOR
            SELECT * FROM Administracion.EVENTOS WHERE ID = P_ID;
        RETURN EVENTO_CURSOR;
    END;

    FUNCTION OBTENER_EVENTOS_SEDE(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        EVENTOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EVENTOS_CURSOR FOR
            SELECT * FROM Administracion.EVENTOS WHERE SEDE = P_SEDE;
        RETURN EVENTOS_CURSOR;
    END;

    -- CR [CREATE, READ] ASISTENTES
    PROCEDURE REGISTRAR_ASISTENTE(
        P_USUARIO IN NUMBER,
        P_EVENTO  IN NUMBER
    ) IS
    BEGIN
        INSERT INTO Administracion.ASISTENTES (USUARIO, EVENTO)
        VALUES (P_USUARIO, P_EVENTO);
    END;

    FUNCTION OBTENER_ASISTENTES_EVENTO(P_EVENTO IN NUMBER) RETURN SYS_REFCURSOR IS
        ASISTENTES_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ASISTENTES_CURSOR FOR
            SELECT * FROM Administracion.ASISTENTES WHERE EVENTO = P_EVENTO;
        RETURN ASISTENTES_CURSOR;
    END;

    -- R [READ] CONTRATOS
    FUNCTION OBTENER_CONTRATOS RETURN SYS_REFCURSOR IS
        CONTRATOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN CONTRATOS_CURSOR FOR
            SELECT * FROM Gerencia.CONTRATOS;
        RETURN CONTRATOS_CURSOR;
    END;

    FUNCTION OBTENER_CONTRATO(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        CONTRATO_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN CONTRATO_CURSOR FOR
            SELECT * FROM Gerencia.CONTRATOS WHERE ID = P_ID;
        RETURN CONTRATO_CURSOR;
    END;

    -- R [READ] EMPLEADOS
    FUNCTION OBTENER_EMPLEADOS_SEDE(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        EMPLEADOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EMPLEADOS_CURSOR FOR
            SELECT * FROM Gerencia.EMPLEADOS WHERE SEDE = P_SEDE;
        RETURN EMPLEADOS_CURSOR;
    END;
END;

CREATE OR REPLACE PACKAGE BODY RECEPCION.PKG_RECEPCION AS
    -- CRUD USUARIOS
    PROCEDURE REGISTRAR_USUARIO(
        P_DOCUMENTO       IN NUMBER,
        P_TIPODOCUMENTO   IN VARCHAR2,
        P_CORREO          IN VARCHAR2,
        P_TELEFONO        IN VARCHAR2,
        P_FECHANACIMIENTO IN DATE,
        P_NOMBRE          IN VARCHAR2,
        P_APELLIDO        IN VARCHAR2,
        P_GENERO          IN VARCHAR2,
        P_EDAD            IN NUMBER
    ) IS
    BEGIN
        INSERT INTO Gerencia.USUARIOS
        VALUES (
                   P_DOCUMENTO,
                   P_TIPODOCUMENTO,
                   P_CORREO,
                   P_TELEFONO,
                   P_FECHANACIMIENTO,
                   P_NOMBRE,
                   P_APELLIDO,
                   P_GENERO,
                   P_EDAD
               );
    END;

    FUNCTION OBTENER_USUARIOS RETURN SYS_REFCURSOR IS
        USUARIOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN USUARIOS_CURSOR FOR
            SELECT * FROM Gerencia.USUARIOS;
        RETURN USUARIOS_CURSOR;
    END;

    FUNCTION OBTENER_USUARIO(P_DOCUMENTO IN NUMBER) RETURN SYS_REFCURSOR IS
        USUARIO_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN USUARIO_CURSOR FOR
            SELECT * FROM Gerencia.USUARIOS WHERE DOCUMENTO = P_DOCUMENTO;
        RETURN USUARIO_CURSOR;
    END;

    PROCEDURE ACTUALIZAR_USUARIO(
        P_DOCUMENTO       IN NUMBER,
        P_TIPODOCUMENTO   IN VARCHAR2,
        P_CORREO          IN VARCHAR2
    ) IS
    BEGIN
        UPDATE Gerencia.USUARIOS
        SET
            TIPODOCUMENTO = P_TIPODOCUMENTO,
            CORREO = P_CORREO
        WHERE DOCUMENTO = P_DOCUMENTO;
    END;

    PROCEDURE ELIMINAR_USUARIO(P_DOCUMENTO IN NUMBER) IS
    BEGIN
        DELETE FROM Gerencia.USUARIOS WHERE DOCUMENTO = P_DOCUMENTO;
    END;

    -- CR [CREATE, READ] MEMBRESIAS
    PROCEDURE REGISTRAR_MEMBRESIA(
        P_USUARIO     IN NUMBER,
        P_TIPO        IN VARCHAR2,
        P_ESTATUS     IN VARCHAR2,
        P_METODOPAGO  IN VARCHAR2,
        P_FECHAINICIO IN DATE
    ) IS
    BEGIN
        INSERT INTO Gerencia.MEMBRESIAS (ID, USUARIO, TIPO, Factura, ESTATUS, METODOPAGO, FECHAINICIO)
        VALUES (
                   NULL,
                   P_USUARIO,
                   P_TIPO,
                   NULL,
                   P_ESTATUS,
                   P_METODOPAGO,
                   P_FECHAINICIO
               );
    END;

    FUNCTION OBTENER_MEMBRESIAS RETURN SYS_REFCURSOR IS
        MEMBRESIAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN MEMBRESIAS_CURSOR FOR
            SELECT * FROM Gerencia.MEMBRESIAS;
        RETURN MEMBRESIAS_CURSOR;
    END;

    FUNCTION OBTENER_MEMBRESIA(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        MEMBRESIA_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN MEMBRESIA_CURSOR FOR
            SELECT * FROM Gerencia.MEMBRESIAS WHERE ID = P_ID;
        RETURN MEMBRESIA_CURSOR;
    END;

    FUNCTION OBTENER_MEMBRESIAS_USUARIO(P_USUARIO IN NUMBER) RETURN SYS_REFCURSOR IS
        MEMBRESIAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN MEMBRESIAS_CURSOR FOR
            SELECT * FROM Gerencia.MEMBRESIAS WHERE USUARIO = P_USUARIO;
        RETURN MEMBRESIAS_CURSOR;
    END;

    -- R [READ] TIPOS DE MEMBRESIA
    FUNCTION OBTENER_TIPOS_MEMBRESIA RETURN SYS_REFCURSOR IS
        TIPOS_MEMBRESIA_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN TIPOS_MEMBRESIA_CURSOR FOR
            SELECT * FROM Gerencia.TIPOMEMBRESIA;
        RETURN TIPOS_MEMBRESIA_CURSOR;
    END;

    FUNCTION OBTENER_TIPO_MEMBRESIA(P_TIPO IN VARCHAR2) RETURN SYS_REFCURSOR IS
        TIPO_MEMBRESIA_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN TIPO_MEMBRESIA_CURSOR FOR
            SELECT * FROM Gerencia.TIPOMEMBRESIA WHERE TIPO = P_TIPO;
        RETURN TIPO_MEMBRESIA_CURSOR;
    END;

    -- R [READ] SEDES
    FUNCTION OBTENER_SEDES RETURN SYS_REFCURSOR IS
        SEDES_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN SEDES_CURSOR FOR
            SELECT * FROM Gerencia.SEDES;
        RETURN SEDES_CURSOR;
    END;

    FUNCTION OBTENER_SEDE(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        SEDE_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN SEDE_CURSOR FOR
            SELECT * FROM Gerencia.SEDES WHERE ID = P_ID;
        RETURN SEDE_CURSOR;
    END;

    -- R [READ] BENEFICIOS SEDES
    FUNCTION OBTENER_BENEFICIOS_SEDES RETURN SYS_REFCURSOR IS
        BENEFICIOS_SEDES_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN BENEFICIOS_SEDES_CURSOR FOR
            SELECT * FROM Gerencia.BENEFICIOSEDES;
        RETURN BENEFICIOS_SEDES_CURSOR;
    END;

    FUNCTION OBTENER_BENEFICIO_SEDE(P_TIPO_MEMBRESIA IN VARCHAR2, P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        BENEFICIO_SEDE_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN BENEFICIO_SEDE_CURSOR FOR
            SELECT * FROM Gerencia.BENEFICIOSEDES WHERE TIPO_MEMBRESIA = P_TIPO_MEMBRESIA AND SEDE = P_SEDE;
        RETURN BENEFICIO_SEDE_CURSOR;
    END;

    -- R [READ] ZONAS
    FUNCTION OBTENER_ZONAS RETURN SYS_REFCURSOR IS
        ZONAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ZONAS_CURSOR FOR
            SELECT * FROM Administracion.ZONAS;
        RETURN ZONAS_CURSOR;
    END;

    FUNCTION OBTENER_ZONA(P_NOMBRE IN VARCHAR2) RETURN SYS_REFCURSOR IS
        ZONA_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ZONA_CURSOR FOR
            SELECT * FROM Administracion.ZONAS WHERE NOMBRE = P_NOMBRE;
        RETURN ZONA_CURSOR;
    END;

    FUNCTION OBTENER_ZONAS_SEDE(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        ZONAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN ZONAS_CURSOR FOR
            SELECT * FROM Administracion.ZONAS WHERE SEDE = P_SEDE;
        RETURN ZONAS_CURSOR;
    END;

    -- R [READ] BENEFICIOS ZONAS
    FUNCTION OBTENER_BENEFICIOS_ZONAS RETURN SYS_REFCURSOR IS
        BENEFICIOS_ZONAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN BENEFICIOS_ZONAS_CURSOR FOR
            SELECT * FROM Gerencia.BENEFICIOZONAS;
        RETURN BENEFICIOS_ZONAS_CURSOR;
    END;

    FUNCTION OBTENER_BENEFICIO_ZONA(P_TIPO_MEMBRESIA IN VARCHAR2, P_ZONA IN VARCHAR2, P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        BENEFICIO_ZONA_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN BENEFICIO_ZONA_CURSOR FOR
            SELECT * FROM Gerencia.BENEFICIOZONAS WHERE TIPO_MEMBRESIA = P_TIPO_MEMBRESIA AND ZONA = P_ZONA AND SEDE = P_SEDE;
        RETURN BENEFICIO_ZONA_CURSOR;
    END;

    -- R [READ] EVENTOS
    FUNCTION OBTENER_EVENTOS RETURN SYS_REFCURSOR IS
        EVENTOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EVENTOS_CURSOR FOR
            SELECT * FROM Administracion.EVENTOS;
        RETURN EVENTOS_CURSOR;
    END;

    FUNCTION OBTENER_EVENTO(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        EVENTO_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EVENTO_CURSOR FOR
            SELECT * FROM Administracion.EVENTOS WHERE ID = P_ID;
        RETURN EVENTO_CURSOR;
    END;

END;

CREATE OR REPLACE PACKAGE BODY USUARIO.PKG_USUARIO AS
    -- CRD CONTROLES
    PROCEDURE REGISTRAR_CONTROL(
        P_USUARIO  IN NUMBER,
        P_FECHA    IN DATE,
        P_PESO     IN NUMBER,
        P_ALTURA   IN NUMBER,
        P_MBICEP   IN NUMBER,
        P_MTRICEP  IN NUMBER,
        P_MTORSO   IN NUMBER,
        P_MABDOMEN IN NUMBER,
        P_IMC      IN NUMBER
    ) IS
    BEGIN
        INSERT INTO Usuario.CONTROLES
        VALUES (
                   P_USUARIO,
                   P_FECHA,
                   P_PESO,
                   P_ALTURA,
                   P_MBICEP,
                   P_MTRICEP,
                   P_MTORSO,
                   P_MABDOMEN,
                   P_IMC
               );
    END;

    FUNCTION OBTENER_CONTROL(P_USUARIO IN NUMBER) RETURN SYS_REFCURSOR IS
        CONTROL_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN CONTROL_CURSOR FOR
            SELECT * FROM Usuario.CONTROLES WHERE USUARIO = P_USUARIO;
        RETURN CONTROL_CURSOR;
    END;

    PROCEDURE ELIMINAR_CONTROL(P_USUARIO IN NUMBER) IS
    BEGIN
        DELETE FROM Usuario.CONTROLES WHERE USUARIO = P_USUARIO;
    END;

    -- R EVENTOS
    FUNCTION OBTENER_EVENTOS RETURN SYS_REFCURSOR IS
        EVENTOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EVENTOS_CURSOR FOR
            SELECT * FROM Administracion.EVENTOS;
        RETURN EVENTOS_CURSOR;
    END;

    FUNCTION OBTENER_EVENTO(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        EVENTO_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EVENTO_CURSOR FOR
            SELECT * FROM Administracion.EVENTOS WHERE ID = P_ID;
        RETURN EVENTO_CURSOR;
    END;

    FUNCTION OBTENER_EVENTOS_SEDE(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        EVENTOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EVENTOS_CURSOR FOR
            SELECT * FROM Administracion.EVENTOS WHERE SEDE = P_SEDE;
        RETURN EVENTOS_CURSOR;
    END;
END;

CREATE OR REPLACE PACKAGE BODY GERENCIA.PKG_GERENCIA AS

    -- CRUD SEDES
    PROCEDURE REGISTRAR_SEDE(
        P_ID          IN NUMBER,
        P_NOMBRE      IN VARCHAR2,
        P_LUGAR       IN NUMBER
    ) IS
    BEGIN
        INSERT INTO Gerencia.SEDES
        VALUES (
                   P_ID,
                   P_NOMBRE,
                   P_LUGAR
               );
    END;

    FUNCTION OBTENER_SEDES RETURN SYS_REFCURSOR IS
        SEDES_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN SEDES_CURSOR FOR
            SELECT * FROM Gerencia.SEDES;
        RETURN SEDES_CURSOR;
    END;

    FUNCTION OBTENER_SEDE(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        SEDE_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN SEDE_CURSOR FOR
            SELECT * FROM Gerencia.SEDES WHERE ID = P_ID;
        RETURN SEDE_CURSOR;
    END;

    PROCEDURE ACTUALIZAR_SEDE(
        P_ID          IN NUMBER,
        P_NOMBRE      IN VARCHAR2
    ) IS
    BEGIN
        UPDATE Gerencia.SEDES
        SET
            NOMBRE = P_NOMBRE
        WHERE ID = P_ID;
    END;

    PROCEDURE ELIMINAR_SEDE(P_ID IN NUMBER) IS
    BEGIN
        DELETE FROM Gerencia.SEDES WHERE ID = P_ID;
    END;

    -- CRUD LUGARES
    PROCEDURE REGISTRAR_LUGAR(
        P_PAIS         IN VARCHAR2,
        P_REGION       IN VARCHAR2,
        P_CIUDAD       IN VARCHAR2,
        P_DIRECCION    IN VARCHAR2,
        P_DETALLES     IN VARCHAR2,
        P_CODIGOPOSTAL IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Gerencia.LUGARES
        VALUES (
                   NULL,
                   P_PAIS,
                   P_REGION,
                   P_CIUDAD,
                   P_DIRECCION,
                   P_DETALLES,
                   P_CODIGOPOSTAL
               );
    END;

    FUNCTION OBTENER_LUGARES RETURN SYS_REFCURSOR IS
        LUGARES_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN LUGARES_CURSOR FOR
            SELECT * FROM Gerencia.LUGARES;
        RETURN LUGARES_CURSOR;
    END;

    FUNCTION OBTENER_LUGAR(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        LUGAR_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN LUGAR_CURSOR FOR
            SELECT * FROM Gerencia.LUGARES WHERE ID = P_ID;
        RETURN LUGAR_CURSOR;
    END;

    FUNCTION OBTENER_LUGARES_CIUDAD(P_PAIS IN VARCHAR2, P_REGION IN VARCHAR2, P_CIUDAD IN VARCHAR2) RETURN SYS_REFCURSOR IS
        LUGARES_CURSOR SYS_REFCURSOR;
    BEGIN

        OPEN LUGARES_CURSOR FOR
            SELECT * FROM Gerencia.LUGARES WHERE PAIS = P_PAIS AND REGION = P_REGION AND CIUDAD = P_CIUDAD;
        RETURN LUGARES_CURSOR;
    END;

    PROCEDURE ACTUALIZAR_LUGAR(
        P_ID       IN NUMBER,
        P_DETALLES IN VARCHAR2
    ) IS
    BEGIN
        UPDATE Gerencia.LUGARES
        SET
            DETALLES = P_DETALLES
        WHERE ID = P_ID;
    END;

    PROCEDURE ELIMINAR_LUGAR(
        P_ID IN NUMBER
    ) IS
    BEGIN
        DELETE FROM Gerencia.LUGARES WHERE ID = P_ID;
    END;

    -- CR [CREATE, READ] EMPLEADO
    PROCEDURE REGISTRAR_EMPLEADO(
        P_DOCUMENTO       IN NUMBER,
        P_TIPODOCUMENTO   IN VARCHAR2,
        P_CORREO          IN VARCHAR2,
        P_TELEFONO        IN VARCHAR2,
        P_FECHANACIMIENTO IN DATE,
        P_NOMBRE          IN VARCHAR2,
        P_APELLIDO        IN VARCHAR2,
        P_GENERO          IN VARCHAR2,
        P_EDAD            IN NUMBER,
        P_SEDE            IN NUMBER,
        P_ESTATUS         IN VARCHAR2,
        P_CARGO           IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Gerencia.EMPLEADOS
        VALUES (
                   P_DOCUMENTO,
                   P_TIPODOCUMENTO,
                   P_CORREO,
                   P_TELEFONO,
                   P_FECHANACIMIENTO,
                   P_NOMBRE,
                   P_APELLIDO,
                   P_GENERO,
                   P_EDAD,
                   P_SEDE,
                   P_ESTATUS,
                   P_CARGO
               );
    END;

    FUNCTION OBTENER_EMPLEADOS RETURN SYS_REFCURSOR IS
        EMPLEADOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EMPLEADOS_CURSOR FOR
            SELECT * FROM Gerencia.EMPLEADOS;
        RETURN EMPLEADOS_CURSOR;
    END;

    FUNCTION OBTENER_EMPLEADO(P_DOCUMENTO IN NUMBER) RETURN SYS_REFCURSOR IS
        EMPLEADO_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EMPLEADO_CURSOR FOR
            SELECT * FROM Gerencia.EMPLEADOS WHERE DOCUMENTO = P_DOCUMENTO;
        RETURN EMPLEADO_CURSOR;
    END;

    FUNCTION OBTENER_EMPLEADOS_SEDE(P_SEDE IN NUMBER) RETURN SYS_REFCURSOR IS
        EMPLEADOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EMPLEADOS_CURSOR FOR
            SELECT * FROM Gerencia.EMPLEADOS WHERE SEDE = P_SEDE;
        RETURN EMPLEADOS_CURSOR;
    END;

    FUNCTION OBTENER_EMPLEADOS_ESTATUS(P_ESTATUS IN VARCHAR2) RETURN SYS_REFCURSOR IS
        EMPLEADOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN EMPLEADOS_CURSOR FOR
            SELECT * FROM Gerencia.EMPLEADOS WHERE ESTATUS = P_ESTATUS;
        RETURN EMPLEADOS_CURSOR;
    END;

    -- CR [CREATE, READ] CONTRATOS
    PROCEDURE REGISTRAR_CONTRATO(
        P_EMPLEADO     IN NUMBER,
        P_TIPOCONTRATO IN VARCHAR2,
        P_FECHAINICIO  IN DATE,
        P_FECHAFINAL   IN DATE,
        P_SUELDO       IN NUMBER,
        P_DESCRIPCION  IN VARCHAR2,
        P_ESTADO       IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Gerencia.CONTRATOS
        VALUES (
                   NULL,
                   P_EMPLEADO,
                   P_TIPOCONTRATO,
                   P_FECHAINICIO,
                   P_FECHAFINAL,
                   P_SUELDO,
                   P_DESCRIPCION,
                   P_ESTADO
               );
    END;

    FUNCTION OBTENER_CONTRATOS RETURN SYS_REFCURSOR IS
        CONTRATOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN CONTRATOS_CURSOR FOR
            SELECT * FROM Gerencia.CONTRATOS;
        RETURN CONTRATOS_CURSOR;
    END;

    FUNCTION OBTENER_CONTRATO(P_ID IN NUMBER) RETURN SYS_REFCURSOR IS
        CONTRATO_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN CONTRATO_CURSOR FOR
            SELECT * FROM Gerencia.CONTRATOS WHERE ID = P_ID;
        RETURN CONTRATO_CURSOR;
    END;

    FUNCTION OBTENER_CONTRATOS_EMPLEADO(P_EMPLEADO IN NUMBER) RETURN SYS_REFCURSOR IS
        CONTRATOS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN CONTRATOS_CURSOR FOR
            SELECT * FROM Gerencia.CONTRATOS WHERE EMPLEADO = P_EMPLEADO;
        RETURN CONTRATOS_CURSOR;
    END;

    -- CR [CREATE, READ] TIPOS DE MEMBRESIA
    PROCEDURE REGISTRAR_TIPO_MEMBRESIA(
        P_TIPO         IN VARCHAR2,
        P_PRECIO       IN NUMBER,
        P_DURACIONDIAS IN NUMBER,
        P_DESCRIPCION  IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Gerencia.TIPOMEMBRESIA
        VALUES (
                   P_TIPO,
                   P_PRECIO,
                   P_DURACIONDIAS,
                   P_DESCRIPCION
               );
    END;

    FUNCTION OBTENER_TIPOS_MEMBRESIA RETURN SYS_REFCURSOR IS
        TIPOS_MEMBRESIA_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN TIPOS_MEMBRESIA_CURSOR FOR
            SELECT * FROM Gerencia.TIPOMEMBRESIA;
        RETURN TIPOS_MEMBRESIA_CURSOR;
    END;

    FUNCTION OBTENER_TIPO_MEMBRESIA(P_TIPO IN VARCHAR2) RETURN SYS_REFCURSOR IS
        TIPO_MEMBRESIA_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN TIPO_MEMBRESIA_CURSOR FOR
            SELECT * FROM Gerencia.TIPOMEMBRESIA WHERE TIPO = P_TIPO;
        RETURN TIPO_MEMBRESIA_CURSOR;
    END;

    -- CR [CREATE, READ] BENEFICIOS SEDES
    PROCEDURE REGISTRAR_BENEFICIO_SEDE(
        P_TIPO_MEMBRESIA IN VARCHAR2,
        P_SEDE           IN NUMBER,
        P_DESCRIPCION    IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Gerencia.BENEFICIOSEDES
        VALUES (
                   P_TIPO_MEMBRESIA,
                   P_SEDE,
                   P_DESCRIPCION
               );
    END;

    FUNCTION OBTENER_BENEFICIOS_SEDES RETURN SYS_REFCURSOR IS
        BENEFICIOS_SEDES_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN BENEFICIOS_SEDES_CURSOR FOR
            SELECT * FROM Gerencia.BENEFICIOSEDES;
        RETURN BENEFICIOS_SEDES_CURSOR;
    END;

    -- CR [CREATE, READ] BENEFICIOS ZONAS

    PROCEDURE REGISTRAR_BENEFICIO_ZONA(
        P_TIPO_MEMBRESIA IN VARCHAR2,
        P_ZONA           IN VARCHAR2,
        P_SEDE           IN NUMBER,
        P_DESCRIPCION    IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO Gerencia.BENEFICIOZONAS
        VALUES (
                   P_TIPO_MEMBRESIA,
                   P_ZONA,
                   P_SEDE,
                   P_DESCRIPCION
               );
    END;

    FUNCTION OBTENER_BENEFICIOS_ZONAS RETURN SYS_REFCURSOR IS
        BENEFICIOS_ZONAS_CURSOR SYS_REFCURSOR;
    BEGIN
        OPEN BENEFICIOS_ZONAS_CURSOR FOR
            SELECT * FROM Gerencia.BENEFICIOZONAS;
        RETURN BENEFICIOS_ZONAS_CURSOR;
    END;
END;