--TODO: Ningun TRIGGER esta en el archivo Astah
CREATE OR REPLACE TRIGGER TGR_NO_ELIMINAR_FACTURAS
    BEFORE DELETE
    ON Gerencia.FACTURAS
    FOR EACH ROW
BEGIN
    RAISE_APPLICATION_ERROR(-20001, 'No se puede eliminar una factura');
END;

CREATE OR REPLACE TRIGGER TGR_SOLO_SE_PUEDE_ACTUALIZAR_DETALLES_EN_FACTURAS
    BEFORE UPDATE
    ON Gerencia.FACTURAS
    FOR EACH ROW
BEGIN
    IF :NEW.id <> :OLD.id OR :NEW.valor <> :OLD.valor OR :NEW.MomentoPago <> :OLD.momentoPago THEN
        RAISE_APPLICATION_ERROR(-20002, 'Solo se pueden actualizar los detalles de una afactura');
    end if;
END;

CREATE OR REPLACE TRIGGER TGR_NO_ELIMINAR_TIPO_MEMBRESIA
    BEFORE DELETE
    ON Gerencia.TIPOMEMBRESIA
    FOR EACH ROW
BEGIN
    RAISE_APPLICATION_ERROR(-20003, 'No se puede eliminar un tipo de membresia');
END;


CREATE OR REPLACE TRIGGER TGR_NO_PUEDEN_EXISTIR_2_OPERADORES
    BEFORE INSERT OR UPDATE
    ON Gerencia.EMPLEADOS
    FOR EACH ROW
DECLARE
    operador_por_sede NUMBER(1);
BEGIN
    IF 'Operador' = :NEW.CARGO THEN
        SELECT COUNT(*) INTO operador_por_sede FROM Gerencia.EMPLEADOS WHERE CARGO = 'Operador' AND SEDE = :NEW.SEDE;

        IF operador_por_sede > 0 THEN
            RAISE_APPLICATION_ERROR(-20004, 'Solo Puede haber un Operador por Sede');
        end if;
    end if;
END;

CREATE SEQUENCE Gerencia.Seq_UID_Facturas_Membresias
    START WITH 100000
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE TRIGGER TGR_BEFORE_INSERT_MEMBRESIAS
    BEFORE INSERT
    ON Gerencia.MEMBRESIAS
    FOR EACH ROW
DECLARE
    valor_Membresia   NUMBER(10, 5);
    id_Factura        NUMBER(10);
    id_Membresia      NUMBER(10);
    dias_de_membresia NUMBER(5);
BEGIN
    SELECT DURACIONDIAS INTO dias_de_membresia FROM Gerencia.TIPOMEMBRESIA
        WHERE TIPO = :NEW.TIPO AND ROWNUM = 1;

    IF :NEW.FECHAINICIO IS NULL THEN :NEW.FECHAINICIO := TRUNC(SYSDATE); END IF;

    :NEW.FECHAFINAL := TRUNC(SYSDATE) + dias_de_membresia;

    SELECT PRECIO
    INTO valor_membresia
    FROM Gerencia.TIPOMEMBRESIA
    WHERE Gerencia.TIPOMEMBRESIA.TIPO = :NEW.Tipo;

    IF :NEW.ESTATUS IS NULL THEN :NEW.ESTATUS := 'Activo'; END IF;

    --Autogeneracion de la Factura
    SELECT Gerencia.Seq_UID_Facturas_Membresias.nextval INTO id_Membresia FROM dual;
    SELECT Gerencia.Seq_UID_Facturas_Membresias.currval INTO id_Factura FROM dual;

    :NEW.ID := id_Membresia;
    :NEW.Factura := id_Factura;

    INSERT INTO Gerencia.FACTURAS (ID, VALOR, DETALLES, MOMENTOPAGO)
    VALUES (id_Factura, valor_Membresia, 'Sin Novedades.', SYSTIMESTAMP);
end;

CREATE SEQUENCE Administracion.SEQ_UID_EVENTOS
    START WITH 100
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;


CREATE OR REPLACE TRIGGER TGR_BEFORE_INSERT_EVENT
    BEFORE INSERT ON Administracion.EVENTOS
    FOR EACH ROW
DECLARE
    cargo_del_lider VARCHAR2(50);
BEGIN
    SELECT CARGO INTO cargo_del_lider FROM Gerencia.EMPLEADOS
        WHERE DOCUMENTO = :NEW.LIDER;
    IF cargo_del_lider != 'Entrenador' THEN
        RAISE_APPLICATION_ERROR(-20005, 'Un Evento solo Puede ser Liderado por un Entrenador');
    end if;

    SELECT Administracion.SEQ_UID_EVENTOS.nextval INTO :NEW.ID FROM DUAL;
end;

CREATE SEQUENCE Gerencia.SEQ_UID_CONTRATOS
    START WITH 9000
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE TRIGGER TGR_BEFORE_INSERT_CONTRATO
    BEFORE INSERT ON Gerencia.CONTRATOS
    FOR EACH ROW
BEGIN
    SELECT Gerencia.SEQ_UID_CONTRATOS.nextval INTO :NEW.ID FROM DUAL;
end;


CREATE SEQUENCE Gerencia.SEQ_UID_LUGARES
    START WITH 0
    INCREMENT BY 1
    MINVALUE 0
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE TRIGGER TGR_BEFORE_INSERT_LUGARES
    BEFORE INSERT ON Gerencia.LUGARES
    FOR EACH ROW
BEGIN
    SELECT Gerencia.SEQ_UID_LUGARES.nextval INTO :NEW.ID FROM DUAL;
end;

CREATE SEQUENCE Administracion.SEQ_UID_ENTRADA_SALIDA
    START WITH 0
    INCREMENT BY 1
    MINVALUE 0
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE TRIGGER TGR_BEFORE_INSERT_REG_ENTRADA_SALIDA
    BEFORE INSERT ON Administracion.REGISTROENTRADASALIDAS
    FOR EACH ROW
BEGIN
    SELECT Administracion.SEQ_UID_ENTRADA_SALIDA.nextval INTO :NEW.ID FROM DUAL;
end;